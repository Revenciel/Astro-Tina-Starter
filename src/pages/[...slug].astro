---
import Head from "../layout-components/Head";
import Header from "../layout-components/Header";
import Layout from "../layout-components/Layout";
import { client } from "../../tina/__generated__/client";

export async function getStaticPaths() {
  // get all the pages that exist, using Tina client
  const allPages = await client.queries.pageConnection();

  // map the data into the required structure for Tina to fetch individual pages
  const tinaPaths = allPages.data.pageConnection.edges!.map((page) => ({
    params: { relativePath: page!.node!._sys.relativePath },
  }));

  // fetch all pages and content from Tina, to pass into useTina hook
  const tinaPages = await Promise.all(
    tinaPaths.map(
      async ({ params }) =>
        await client.queries.page({ relativePath: `${params.relativePath}` })
    )
  );

  function ancestor(page:any): any{
    if (page.parentPage){
      return (ancestor(page.parentPage) + page._sys.filename + '/');
    }
    return (page._sys.filename + '/');
  }

  function parentPage(page: any) {

    // If there is a parent page, call recursive ancestor() on the parent
    if (page.data.page.parentPage) {
      for (let i = 0; i <= (tinaPages.length - 1); i++ ){
        //get the parent page and call recursive ancestor() on it
        if (tinaPages[i].data.page.parentPage?._sys.filename === page.data.page.parentPage._sys.filename){
          return ancestor(tinaPages[i].data.page.parentPage);
        }
      }
    }
    
    //there is no parent page
    return "";
  }

  // reformat data for easier use
  return tinaPages.map((page) => ({

    params: {
      slug: parentPage(page) + page.data.page._sys.filename,
    },
    props: {
      data: page.data,
      query: page.query,
      variables: page.variables,
    },
  }));
}
---

<html lang="en">
  <head>
    <Head props={Astro.props} />
  </head>
  <body>
    <Header props={Astro.props} />
    <!-- TODO: Investigate and fix type error here -->
    <Layout client:load props={Astro.props} />
  </body><!-- Code snippet: rendering a list of pages from an astro component--><!-- Update config to include an "include in nav" boolean, then update filter

  const pages = (await Astro.glob('./../content/pages/*.{md,mdx}'));
---
  <ul>
  {pages.filter(page => page.frontmatter.title.includes('Home')).map((page: any) => {
    return (
      <li><a href={page.file.split('/').pop().replace(/\.md(x)?/,'')}>{page.frontmatter.title}</a></li>
    )
  })}
</ul> -->
</html>
